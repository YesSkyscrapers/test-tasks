{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","tab","setTab","useEffect","document","title","onTabSelect","tabId","className","onClick","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"gMAAe,I,YCyGAA,MArGf,WAEE,MAAoBC,mBAAS,GAA7B,mBAAKC,EAAL,KAAUC,EAAV,KAEAC,qBAAU,WACRC,SAASC,MAAQ,gGAChB,IAEH,IAAMC,EAAc,SAAAC,GAClBL,EAAOK,IAGT,OACE,qBAAKC,UAAU,MAAf,SACE,sBAAKA,UAAU,aAAf,UACE,sBAAKA,UAAU,0BAAf,UACE,qBAAKC,QAAS,kBAAMH,EAAY,IAAIE,UAAkB,GAAPP,EAAW,aAAe,MAAzE,sBACA,qBAAKQ,QAAS,kBAAMH,EAAY,IAAIE,UAAkB,GAAPP,EAAW,aAAe,MAAzE,wBAGO,GAAPA,EACE,sBAAKO,UAAU,iBAAf,UACE,qBAAKA,UAAU,aAAf,uDACA,sBAAKA,UAAU,YAAf,UACE,gCACE,mXAAyE,uBACzE,+VAA8E,uBAC9E,qYAAgG,uBAChG,sWAAqF,0BAEvF,uBACA,gCACE,0GAA6B,uBAC7B,sBAAMA,UAAU,gBAAhB,sJAAiE,uBACjE,sBAAMA,UAAU,gBAAhB,2OAAgF,uBAChF,sBAAMA,UAAU,gBAAhB,sOAAgF,0BAElF,uBACA,gCACE,0GAA4B,uBAC5B,sBAAMA,UAAU,gBAAhB,oPAAoF,uBACpF,sBAAMA,UAAU,gBAAhB,sZAAoH,uBACpH,sBAAMA,UAAU,gBAAhB,mbAAwH,0BAE1H,uBACA,gCACE,0GAA4B,uBAC5B,sBAAMA,UAAU,gBAAhB,oPAAoF,uBACpF,sBAAMA,UAAU,gBAAhB,iSAA8F,uBAC9F,sBAAMA,UAAU,gBAAhB,iUAAgG,0BAElG,uBACA,gCACE,0GAA4B,uBAC5B,sBAAMA,UAAU,gBAAhB,oPAAoF,uBACpF,sBAAMA,UAAU,gBAAhB,mKAAyE,gCAK/E,sBAAKA,UAAU,yBAAf,UACE,qBAAKA,UAAU,aAAf,yGACA,sBAAKA,UAAU,oBAAf,UACE,sFACA,mBAAGE,KAAK,iDAAR,4DACA,2sBACA,mBAAGA,KAAK,sDAAR,iEACA,6fACA,uBACA,uBACA,ymBACA,uBACA,uBACA,+PACA,uBACA,uBACA,6lDACA,uBACA,uBACA,kSACA,uBACA,uBACA,09BACA,uBACA,uBACA,m6CACA,uBACA,uBACA,imBACA,uBACA,uBACA,2vBAAwL,0GAAoB,gGCnF7MC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlB,SAASmB,eAAe,SAM1BZ,K","file":"static/js/main.f6f90411.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport { useEffect, useState } from 'react';\n\nfunction App() {\n\n  let [tab, setTab] = useState(0)\n\n  useEffect(() => {\n    document.title = \"Тестовые задания\"\n  }, [])\n\n  const onTabSelect = tabId => {\n    setTab(tabId)\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <div className=\"Tabs-container noselect\">\n          <div onClick={() => onTabSelect(0)} className={tab == 0 ? \"Active-tab\" : \"Tab\"}>Frontend</div>\n          <div onClick={() => onTabSelect(1)} className={tab == 1 ? \"Active-tab\" : \"Tab\"}>Backend</div>\n        </div>\n        {\n          tab == 0 ? (\n            <div className=\"Task-container\">\n              <div className=\"Task-title\">Список Todo</div>\n              <div className=\"Task-text\">\n                <div>\n                  <span>Создать компонент соответствующий нижеуказанным требованиям.</span><br />\n                  <span>Наличие файлика readme с инструкциями по запуску является плюсом.</span><br />\n                  <span>Технология - React-Native. Отсутствие Expo в проекте является очень большим плюсом.</span><br />\n                  <span>Достаточно сделать запускаемым по крайней мере одну ОС (Android или iOS)</span><br />\n                </div>\n                <br />\n                <div>\n                  <span >1-ая сложность:</span><br />\n                  <span className=\"Task-subtitle\">• Добавление новой записи;</span><br />\n                  <span className=\"Task-subtitle\">• Отображение списка добавленных записей;</span><br />\n                  <span className=\"Task-subtitle\">• Удаление из списка добавленных записей.</span><br />\n                </div>\n                <br />\n                <div>\n                  <span>2-ая сложность:</span><br />\n                  <span className=\"Task-subtitle\">• (Все пункты с предыдущего уровня сложности)</span><br />\n                  <span className=\"Task-subtitle\">• Новая запись добавляется при условии, что длина записи меньше некоторого N;</span><br />\n                  <span className=\"Task-subtitle\">• Переключение статуса записи Выполнено / Невыполненный при клике на её название.</span><br />\n                </div>\n                <br />\n                <div>\n                  <span>3-ая сложность:</span><br />\n                  <span className=\"Task-subtitle\">• (Все пункты с предыдущего уровня сложности)</span><br />\n                  <span className=\"Task-subtitle\">• Фильтрация по типу (все, выполненные, невыполненные);</span><br />\n                  <span className=\"Task-subtitle\">• Отображение счётчика выполненных и невыполненных задач.</span><br />\n                </div>\n                <br />\n                <div>\n                  <span>4-ая сложность:</span><br />\n                  <span className=\"Task-subtitle\">• (Все пункты с предыдущего уровня сложности)</span><br />\n                  <span className=\"Task-subtitle\">• Использование хранилища (Redux).</span><br />\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"Backend-task-container\">\n              <div className=\"Task-title\">Тестовое задание</div>\n              <div className=\"Backend-task-text\">\n                <span>{`По адресу `}</span>\n                <a href=\"http://testlodtask20172.azurewebsites.net/task\">http://testlodtask20172.azurewebsites.net/task</a>\n                <span>{` вы можете получить строку, содержащую информацию о жителях города X. Строка содержит id, имя с фамилией и пол каждого жителя. А по адресу `}</span>\n                <a href=\"http://testlodtask20172.azurewebsites.net/task/{id}\">{`http://testlodtask20172.azurewebsites.net/task/{id}`}</a>\n                <span>{` вы получите имя, фамилию, пол и возраст конкретного жителя, id которого можно взять из 1 запроса.`}</span>\n                <br />\n                <br />\n                <span>{`Нужно написать приложение (API), согласно одному из требований, приведенных ниже, на ваш выбор. Сложность растет от 1 к 3`}</span>\n                <br />\n                <br />\n                <span>{`1) Нужно реализовать 2 метода api, которые будут:`}</span>\n                <br />\n                <br />\n                <span>{`• Возвращать список жителей города X. Так же в методе должна быть возможность передавать опциональный параметр, по которому жители будут фильтроваться по полу (возвращать всех, только мужчин, или только женщин). Так же, в методе нужна пагинация (постраничный вывод). В результате не нужно выводить возраст жителя.`}</span>\n                <br />\n                <br />\n                <span>{`• Возвращать конкретного жителя по переданному id`}</span>\n                <br />\n                <br />\n                <span>{`2) При запуске приложения сохранить список жителей и данные по ним в InMemory-хранилище (хранилище в памяти). В дальнейшем взаимодействовать с этим хранилищем, чтобы получить те, или иные данные.`}</span>\n                <br />\n                <br />\n                <span>{`В этом задании также нужно реализовать 2 метода api, которые описаны в задании выше. Но в первый метод (список жителей), нужно также добавить фильтрацию по возрасту (выводить жителей  с возрастом от x до y). Параметр также, опциональный, если его не передавать, то фильтр не учитывается.`}</span>\n                <br />\n                <br />\n                <span>{`3)Такое же задание, что и в пункте 2, только вместо InMemory-хранилища использовать базу данных MsSql (или MySql) и EntityFramework для работы с ней`}</span>\n                <br />\n                <br />\n                <span>{`Любая реализация должна быть покрыта Unit-тестами, используя NUnit или XUnit. Также любая реализация должна быть выполнена на фреймворке ASP.NET core версии 3+. А еще `}</span><b>очень хочется</b><span>{` увидеть LINQ`}</span>\n              </div>\n            </div>\n          )\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}